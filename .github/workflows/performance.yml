name: Performance & Monitoring

on:
  push:
    branches: [ main ]
  schedule:
    # Run performance tests daily at 6 AM UTC
    - cron: '0 6 * * *'

jobs:
  # üöÄ OPTIMIZATION: Run performance tests in parallel with matrix strategy
  build-performance:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: [build-time, bundle-analysis]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js with Performance Optimization
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'
        
    # üöÄ OPTIMIZATION: Advanced caching for performance tests
    - name: Cache Performance Test Dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          ${{ github.workspace }}/.next/cache
          ${{ github.workspace }}/node_modules/.cache
        key: ${{ runner.os }}-perf-${{ matrix.test-type }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-perf-${{ matrix.test-type }}-
          ${{ runner.os }}-perf-
        
    - name: Install Dependencies (Performance Optimized)
      run: |
        echo "üì¶ Installing dependencies with performance optimization..."
        npm ci --prefer-offline --no-audit --no-fund --silent
      
    - name: Build Performance Test
      if: matrix.test-type == 'build-time'
      run: |
        echo "‚è±Ô∏è Testing build performance with optimization..."
        
        # üöÄ OPTIMIZATION: Enhanced build performance monitoring
        export NODE_OPTIONS="--max-old-space-size=4096"
        export NEXT_TELEMETRY_DISABLED=1
        
        # Time the build process with detailed metrics
        start_time=$(date +%s)
        start_memory=$(ps -o pid,vsz,rss,comm -p $$ | tail -1 | awk '{print $2}')
        
        npm run build
        
        end_time=$(date +%s)
        end_memory=$(ps -o pid,vsz,rss,comm -p $$ | tail -1 | awk '{print $2}')
        
        build_duration=$((end_time - start_time))
        memory_usage=$(($end_memory - $start_memory))
        
        echo "üèóÔ∏è Build completed in $build_duration seconds"
        echo "üíæ Memory usage delta: $memory_usage KB"
        
        # üöÄ OPTIMIZATION: Performance benchmarks with alerts
        if [ $build_duration -gt 300 ]; then
          echo "‚ö†Ô∏è BUILD PERFORMANCE ALERT: Build time exceeded 5 minutes: ${build_duration}s"
          echo "::warning::Build performance degraded - investigate optimization opportunities"
        elif [ $build_duration -gt 180 ]; then
          echo "‚ö†Ô∏è Build time approaching threshold: ${build_duration}s (target: <180s)"
        else
          echo "‚úÖ Build time excellent: ${build_duration}s"
        fi
        
        # Store performance metrics for trending
        echo "build_duration=$build_duration" >> $GITHUB_OUTPUT
        echo "memory_usage=$memory_usage" >> $GITHUB_OUTPUT
        
    - name: Bundle Analysis
      if: matrix.test-type == 'bundle-analysis'
      run: |
        echo "üì¶ Advanced bundle analysis with optimization insights..."
        
        # Ensure build exists
        npm run build
        
        # üöÄ OPTIMIZATION: Comprehensive bundle analysis
        total_size=$(du -sb out/ | cut -f1)
        total_mb=$((total_size / 1024 / 1024))
        
        echo "üìä Total build size: ${total_mb}MB"
        
        # Detailed asset analysis
        echo "üìÑ Route-by-route analysis:"
        find out -name "index.html" -exec dirname {} \; | while read dir; do
          size=$(du -sh "$dir" | cut -f1)
          route=$(echo "$dir" | sed 's|out||' | sed 's|^$|/|')
          echo "  $route: $size"
        done
        
        # JavaScript bundle analysis
        echo "üì¶ JavaScript bundle breakdown:"
        if [ -d "out/_next/static/chunks" ]; then
          find out/_next/static/chunks -name "*.js" -exec du -h {} + | sort -hr | head -10
        fi
        
        # üöÄ OPTIMIZATION: Size optimization alerts
        if [ $total_mb -gt 100 ]; then
          echo "‚ö†Ô∏è BUNDLE SIZE ALERT: Build size is large: ${total_mb}MB > 100MB"
          echo "::warning::Bundle size exceeded threshold - consider code splitting or asset optimization"
        elif [ $total_mb -gt 50 ]; then
          echo "‚ö†Ô∏è Bundle size approaching threshold: ${total_mb}MB (target: <50MB)"
        else
          echo "‚úÖ Bundle size excellent: ${total_mb}MB"
        fi
        
        # Store bundle metrics
        echo "bundle_size_mb=$total_mb" >> $GITHUB_OUTPUT
        
  # üöÄ OPTIMIZATION: Enhanced dependency audit with intelligent caching
  dependency-audit:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js with Dependency Optimization
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'
        
    # üöÄ OPTIMIZATION: Cache dependency analysis results
    - name: Cache Dependency Analysis
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          .npm-audit-cache
        key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json') }}-${{ github.run_number }}
        restore-keys: |
          ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json') }}-
          ${{ runner.os }}-deps-
        
    - name: Install Dependencies (Audit Optimized)
      run: |
        echo "üì¶ Installing dependencies for audit..."
        npm ci --prefer-offline --no-fund --silent
      
    - name: Enhanced Dependency Analysis
      run: |
        echo "üìö Comprehensive dependency analysis..."
        
        # üöÄ OPTIMIZATION: Parallel dependency checks
        (
          echo "üìä Dependency counts:"
          deps_prod=$(npm list --depth=0 --json 2>/dev/null | jq '.dependencies | length' 2>/dev/null || echo "0")
          deps_dev=$(npm list --depth=0 --dev --json 2>/dev/null | jq '.devDependencies | length' 2>/dev/null || echo "0")
          echo "Production dependencies: $deps_prod"
          echo "Development dependencies: $deps_dev"
          echo "Total dependencies: $((deps_prod + deps_dev))"
        ) &
        
        (
          echo "üìÖ Checking for outdated packages..."
          npm outdated --json > outdated.json 2>/dev/null || echo "{}" > outdated.json
          outdated_count=$(cat outdated.json | jq 'length' 2>/dev/null || echo "0")
          echo "Outdated packages: $outdated_count"
          if [ "$outdated_count" -gt "0" ]; then
            echo "::warning::$outdated_count packages are outdated - consider updating"
          fi
        ) &
        
        (
          echo "üîí Enhanced security audit..."
          npm audit --audit-level=low --json > audit.json 2>/dev/null || echo "{}" > audit.json
          
          # Parse audit results
          critical=$(cat audit.json | jq '.metadata.vulnerabilities.critical // 0' 2>/dev/null || echo "0")
          high=$(cat audit.json | jq '.metadata.vulnerabilities.high // 0' 2>/dev/null || echo "0")
          moderate=$(cat audit.json | jq '.metadata.vulnerabilities.moderate // 0' 2>/dev/null || echo "0")
          
          echo "Security vulnerabilities:"
          echo "  Critical: $critical"
          echo "  High: $high"
          echo "  Moderate: $moderate"
          
          if [ "$critical" -gt "0" ]; then
            echo "::error::Critical security vulnerabilities found: $critical"
          elif [ "$high" -gt "0" ]; then
            echo "::warning::High security vulnerabilities found: $high"
          fi
        ) &
        
        # Wait for all background jobs
        wait
        
        echo "‚úÖ Dependency analysis completed"
        
  site-health-check:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Site Availability Test
      run: |
        echo "üåê Testing site availability..."
        
        SITE_URL="https://jdoner02.github.io/ewu-cyber-games-portal/"
        
        # Test main site
        if curl -f -s -o /dev/null "$SITE_URL"; then
          echo "‚úÖ Main site is accessible"
        else
          echo "‚ùå Main site is not accessible"
          exit 1
        fi
        
        # Test specific game routes
        GAME_ROUTES=(
          "games/pokemon-cyber-mmo/"
          "games/cybersilk/"
          "games/password-fortress/"
          "games/phishing-detective/"
        )
        
        for route in "${GAME_ROUTES[@]}"; do
          if curl -f -s -o /dev/null "${SITE_URL}${route}"; then
            echo "‚úÖ $route is accessible"
          else
            echo "‚ö†Ô∏è $route may not be accessible"
          fi
        done
        
    - name: Performance Metrics
      run: |
        echo "‚ö° Gathering performance metrics..."
        
        SITE_URL="https://jdoner02.github.io/ewu-cyber-games-portal/"
        
        # Measure response time
        response_time=$(curl -o /dev/null -s -w '%{time_total}\n' "$SITE_URL")
        echo "üìä Main page response time: ${response_time}s"
        
        # Check response headers
        echo "üìã Response headers:"
        curl -s -I "$SITE_URL" | grep -E "(content-type|content-length|cache-control)"
        
  repository-health:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Repository Metrics
      run: |
        echo "üìä Repository health metrics..."
        
        # Count files by type
        echo "üìÅ File counts:"
        find . -name "*.ts" | wc -l | xargs echo "TypeScript files:"
        find . -name "*.tsx" | wc -l | xargs echo "TSX files:"
        find . -name "*.js" | wc -l | xargs echo "JavaScript files:"
        find . -name "*.jsx" | wc -l | xargs echo "JSX files:"
        find . -name "*.css" | wc -l | xargs echo "CSS files:"
        find . -name "*.md" | wc -l | xargs echo "Markdown files:"
        
        # Check git repository size
        repo_size=$(du -sh .git | cut -f1)
        echo "üì¶ Git repository size: $repo_size"
        
        # Count recent commits
        recent_commits=$(git log --since="1 week ago" --oneline | wc -l)
        echo "üìù Commits in last week: $recent_commits"
        
        # Check branch status
        echo "üåø Git status:"
        git status --porcelain | wc -l | xargs echo "Modified files:"
        git branch -r | wc -l | xargs echo "Remote branches:"