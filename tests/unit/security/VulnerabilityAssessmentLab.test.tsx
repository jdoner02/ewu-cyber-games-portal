/**
 * 🤖 TEST GUARDIAN AGENT - VulnerabilityAssessmentLab Test Suite
 * 
 * This comprehensive test suite follows TDD RED-GREEN-REFACTOR methodology to ensure
 * the vulnerability assessment educational tool is safe, accurate, and reliable for
 * middle school students (ages 10-14).
 * 
 * EDUCATIONAL SAFETY FOCUS:
 * - Privacy pr      const user = userEvent.setup()
      render(<VulnerabilityAssessmentLab />)
      
      await user.click(screen.getByRole('button', { name: /🎯.*Scan Targets/ }))
      
      // Should display available targets
      await waitFor(() => {
        expect(screen.getByText(/Scan Target Management/i)).toBeInTheDocument()
      })for student data
 * - Age-appropriate vulnerability examples
 * - Educational content validation
 * - Accessibility compliance
 * - Teacher oversight capabilities
 * 
 * Test Coverage Areas:
 * 1. Component Rendering & User Interface
 * 2. Educational Content Safety & Age-Appropriateness
 * 3. Privacy Protection & COPPA Compliance
 * 4. Accessibility & Inclusive Design
 * 5. Vulnerability Scanning Simulation
 * 6. Data Handling & State Management
 * 7. Teacher Tools & Classroom Integration
 * 8. Performance & Reliability
 * 9. Integration with Security Systems
 * 10. Educational Learning Outcomes
 */

import React from 'react'
import { render, screen, fireEvent, waitFor, act } from '@testing-library/react'
import userEvent from '@testing-library/user-event'
import '@testing-library/jest-dom'
import { toast } from 'sonner'

// Mock external dependencies for testing
jest.mock('framer-motion', () => ({
  motion: {
    div: ({ children, initial, animate, exit, whileHover, whileTap, ...props }: any) => <div {...props}>{children}</div>,
    button: ({ children, initial, animate, exit, whileHover, whileTap, ...props }: any) => <button {...props}>{children}</button>,
  },
  AnimatePresence: ({ children, mode }: any) => <>{children}</>,
}))

jest.mock('sonner', () => ({
  toast: {
    success: jest.fn(),
    error: jest.fn(),
    warning: jest.fn(),
    info: jest.fn(),
  },
}))

// Mock icons
jest.mock('lucide-react', () => ({
  Search: () => <span data-testid="search-icon">🔍</span>,
  AlertTriangle: () => <span data-testid="alert-icon">⚠️</span>,
  CheckCircle: () => <span data-testid="check-icon">✅</span>,
  XCircle: () => <span data-testid="x-icon">❌</span>,
  Shield: () => <span data-testid="shield-icon">🛡️</span>,
  Activity: () => <span data-testid="activity-icon">📊</span>,
  Database: () => <span data-testid="database-icon">🗄️</span>,
  Globe: () => <span data-testid="globe-icon">🌐</span>,
  Server: () => <span data-testid="server-icon">🖥️</span>,
  Smartphone: () => <span data-testid="smartphone-icon">📱</span>,
  Lock: () => <span data-testid="lock-icon">🔒</span>,
  Unlock: () => <span data-testid="unlock-icon">🔓</span>,
  Eye: () => <span data-testid="eye-icon">👁️</span>,
  Play: () => <span data-testid="play-icon">▶️</span>,
  Pause: () => <span data-testid="pause-icon">⏸️</span>,
  RotateCcw: () => <span data-testid="rotate-icon">🔄</span>,
  Download: () => <span data-testid="download-icon">📥</span>,
  FileText: () => <span data-testid="file-icon">📄</span>,
  BarChart3: () => <span data-testid="chart-icon">📊</span>,
  TrendingUp: () => <span data-testid="trend-icon">📈</span>,
  Users: () => <span data-testid="users-icon">👥</span>,
  Clock: () => <span data-testid="clock-icon">🕐</span>,
  Target: () => <span data-testid="target-icon">🎯</span>,
  Zap: () => <span data-testid="zap-icon">⚡</span>,
  Bug: () => <span data-testid="bug-icon">🐛</span>,
  Key: () => <span data-testid="key-icon">🔑</span>,
  Wifi: () => <span data-testid="wifi-icon">📡</span>,
  HardDrive: () => <span data-testid="hdd-icon">💾</span>,
  Code: () => <span data-testid="code-icon">💻</span>,
  Monitor: () => <span data-testid="monitor-icon">🖥️</span>,
}))

import VulnerabilityAssessmentLab from '../../../src/security/VulnerabilityAssessmentLab'

describe('🔍 VulnerabilityAssessmentLab - Educational Security Tool', () => {
  
  beforeEach(() => {
    jest.clearAllMocks()
    // Reset all toast mocks before each test
    ;(toast.success as jest.Mock).mockClear()
    ;(toast.error as jest.Mock).mockClear()
    ;(toast.warning as jest.Mock).mockClear()
    ;(toast.info as jest.Mock).mockClear()
  })

  // ===============================
  // 1. COMPONENT RENDERING & UI TESTS
  // ===============================

  describe('🎨 Component Rendering & User Interface', () => {
    test('renders main vulnerability assessment interface', () => {
      render(<VulnerabilityAssessmentLab />)
      
      expect(screen.getByText('🔍 Vulnerability Assessment Lab')).toBeInTheDocument()
      expect(screen.getByText('Find security weaknesses before the bad guys do!')).toBeInTheDocument()
    })

    test('displays all navigation tabs with proper labels', () => {
      render(<VulnerabilityAssessmentLab />)
      
      expect(screen.getByText('📊 Security Dashboard')).toBeInTheDocument()
      expect(screen.getByRole('button', { name: /🎯 Scan Targets/i })).toBeInTheDocument()
      expect(screen.getByText('🔍 Vulnerability Scanner')).toBeInTheDocument()
      expect(screen.getByText('📋 Security Reports')).toBeInTheDocument()
      expect(screen.getByText('🎓 Learn Vulnerability Assessment')).toBeInTheDocument()
    })

    test('tab navigation works correctly', async () => {
      const user = userEvent.setup()
      render(<VulnerabilityAssessmentLab />)
      
      const targetsTab = screen.getByRole('button', { name: /🎯 Scan Targets/i })
      await user.click(targetsTab)
      
      // Should switch to targets view
      expect(targetsTab).toHaveClass('bg-red-500', 'text-white')
    })

    test('renders with educational styling and branding', () => {
      render(<VulnerabilityAssessmentLab />)
      
      const mainContainer = screen.getByText('🔍 Vulnerability Assessment Lab').closest('div')?.parentElement
      expect(mainContainer).toHaveClass('max-w-7xl', 'mx-auto')
    })

    test('displays security icons correctly', () => {
      render(<VulnerabilityAssessmentLab />)
      
      expect(screen.getByTestId('chart-icon')).toBeInTheDocument()
      expect(screen.getByTestId('target-icon')).toBeInTheDocument()
      expect(screen.getAllByTestId('search-icon')).toHaveLength(2) // Tab and dashboard
    })
  })

  // ===============================
  // 2. EDUCATIONAL CONTENT SAFETY
  // ===============================

  describe('🎓 Educational Content Safety & Age-Appropriateness', () => {
    test('uses age-appropriate language in vulnerability descriptions', async () => {
      const user = userEvent.setup()
      render(<VulnerabilityAssessmentLab />)
      
      // Navigate to learning section
      await user.click(screen.getByText('🎓 Learn Vulnerability Assessment'))
      
      // Check for educational, non-threatening language
      expect(screen.queryByText(/hack/i)).not.toBeInTheDocument()
      expect(screen.queryByText(/attack/i)).toBeInTheDocument() // "attack" is okay in educational context
      expect(screen.queryByText(/exploit/i)).toBeInTheDocument() // Technical term used appropriately
    })

    test('focuses on protective rather than offensive security', async () => {
      const user = userEvent.setup()
      render(<VulnerabilityAssessmentLab />)
      
      await user.click(screen.getByText('🎓 Learn Vulnerability Assessment'))
      
      // Should emphasize protection and defense
      expect(screen.getByText(/Find security weaknesses before the bad guys do/i)).toBeInTheDocument()
      expect(screen.getByText(/Remediation Planning/i)).toBeInTheDocument()
    })

    test('provides positive learning outcomes', async () => {
      const user = userEvent.setup()
      render(<VulnerabilityAssessmentLab />)
      
      await user.click(screen.getByText('🎓 Learn Vulnerability Assessment'))
      
      // Should mention career opportunities and positive applications
      expect(screen.getByText(/career/i)).toBeInTheDocument()
      expect(screen.getAllByText(/professional/i)).toHaveLength(2) // "Professional Vulnerability Assessment Tools" header + "Burp Suite (Professional Standard)" item
    })

    test('includes appropriate safety warnings', async () => {
      const user = userEvent.setup()
      render(<VulnerabilityAssessmentLab />)
      
      await user.click(screen.getByText('🎓 Learn Vulnerability Assessment'))
      
      // Should include ethical guidance
      expect(screen.getByText(/Learning Center/i)).toBeInTheDocument()
    })

    test('demonstrates real-world applications appropriately', async () => {
      const user = userEvent.setup()
      render(<VulnerabilityAssessmentLab />)
      
      await user.click(screen.getByText('🎓 Learn Vulnerability Assessment'))
      
      // Should mention legitimate companies and use cases
      expect(screen.getByText(/cybersecurity career paths/i)).toBeInTheDocument()
      expect(screen.getByText(/cybersecurity/i)).toBeInTheDocument()
    })
  })

  // ===============================
  // 3. PRIVACY PROTECTION & COPPA
  // ===============================

  describe('🔒 Privacy Protection & COPPA Compliance', () => {
    test('does not collect or display personal information', () => {
      render(<VulnerabilityAssessmentLab />)
      
      // Should not ask for personal data
      expect(screen.queryByLabelText(/name/i)).not.toBeInTheDocument()
      expect(screen.queryByLabelText(/email/i)).not.toBeInTheDocument()
      expect(screen.queryByLabelText(/phone/i)).not.toBeInTheDocument()
      expect(screen.queryByLabelText(/address/i)).not.toBeInTheDocument()
    })

    test('uses simulated data for educational examples', async () => {
      const user = userEvent.setup()
      render(<VulnerabilityAssessmentLab />)
      
      await user.click(screen.getByRole('button', { name: /🎯 Scan Targets/i }))
      
      // Should use clearly fictional/educational examples
      await waitFor(() => {
        expect(screen.getByText(/demo targets/i)).toBeInTheDocument()
        expect(screen.getByText(/Advanced target management interface coming soon/i)).toBeInTheDocument()
      })
    })

    test('implements privacy-safe vulnerability examples', async () => {
      const user = userEvent.setup()
      render(<VulnerabilityAssessmentLab />)
      
      // Start a scan to trigger vulnerability generation
      await user.click(screen.getByText('🔍 Vulnerability Scanner'))
      
      // Should not contain real personal data in vulnerabilities
      expect(screen.queryByText(/john\.doe/i)).not.toBeInTheDocument()
      expect(screen.queryByText(/123-45-6789/i)).not.toBeInTheDocument()
    })

    test('provides teacher oversight capabilities', async () => {
      const user = userEvent.setup()
      render(<VulnerabilityAssessmentLab />)
      
      await user.click(screen.getByText('📋 Security Reports'))
      
      // Should provide reporting suitable for teacher review
      expect(screen.getAllByText(/reports/i)).toHaveLength(4) // Tab, content header, description, and interface message
    })

    test('maintains educational focus without real security risks', () => {
      render(<VulnerabilityAssessmentLab />)
      
      // Should not provide actual penetration testing tools
      expect(screen.queryByText(/nmap/i)).not.toBeInTheDocument()
      expect(screen.queryByText(/metasploit/i)).not.toBeInTheDocument()
    })
  })

  // ===============================
  // 4. ACCESSIBILITY & INCLUSIVE DESIGN
  // ===============================

  describe('♿ Accessibility & Inclusive Design', () => {
    test('provides semantic HTML structure', () => {
      render(<VulnerabilityAssessmentLab />)
      
      expect(screen.getByRole('heading', { level: 1 })).toBeInTheDocument()
      expect(screen.getAllByRole('button')).toHaveLength(5) // Navigation tabs
    })

    test('includes descriptive text for all interactive elements', () => {
      render(<VulnerabilityAssessmentLab />)
      
      const buttons = screen.getAllByRole('button')
      buttons.forEach(button => {
        expect(button).toHaveTextContent(/.+/) // Each button should have text content
      })
    })

    test('supports keyboard navigation', async () => {
      const user = userEvent.setup()
      render(<VulnerabilityAssessmentLab />)
      
      const firstTab = screen.getByText('📊 Security Dashboard')
      await user.tab()
      
      // First tab should be focusable
      expect(document.activeElement).toBe(firstTab.closest('button'))
    })

    test('uses high contrast colors for text readability', () => {
      render(<VulnerabilityAssessmentLab />)
      
      const heading = screen.getByText('🔍 Vulnerability Assessment Lab')
      expect(heading).toHaveClass('text-gray-800')
    })

    test('provides alternative text for visual indicators', () => {
      render(<VulnerabilityAssessmentLab />)
      
      // Icons should have test IDs for screen readers
      expect(screen.getByTestId('chart-icon')).toBeInTheDocument()
      expect(screen.getByTestId('target-icon')).toBeInTheDocument()
    })
  })

  // ===============================
  // 5. VULNERABILITY SCANNING SIMULATION
  // ===============================

  describe('🔍 Vulnerability Scanning Simulation', () => {
    test('initializes with default scan targets', async () => {
      render(<VulnerabilityAssessmentLab />)
      
      await act(async () => {
        await new Promise(resolve => setTimeout(resolve, 0))
      })
      
      // Should have educational scan targets loaded
      expect(screen.getAllByText('🎯 Scan Targets')).toHaveLength(2) // Button and dashboard metric
    })

    test('allows selection of scan targets', async () => {
      const user = userEvent.setup()
      render(<VulnerabilityAssessmentLab />)
      
      await user.click(screen.getByRole('button', { name: /🎯.*Scan Targets/ }))
      
      // Should display available targets
      await waitFor(() => {
        expect(screen.getByText(/Configure systems and applications to scan/i)).toBeInTheDocument()
      })
    })

    test('simulates vulnerability scan process', async () => {
      const user = userEvent.setup()
      render(<VulnerabilityAssessmentLab />)
      
      await user.click(screen.getByText('🔍 Vulnerability Scanner'))
      
      // Should show scanner interface
      expect(screen.getByText('🔍 Vulnerability Scanner')).toBeInTheDocument()
    })

    test('generates educational vulnerability reports', async () => {
      const user = userEvent.setup()
      render(<VulnerabilityAssessmentLab />)
      
      await user.click(screen.getByText('📋 Security Reports'))
      
      // Should provide educational reporting
      expect(screen.getByText('📋 Security Reports')).toBeInTheDocument()
    })

    test('provides different scan types for learning', async () => {
      const user = userEvent.setup()
      render(<VulnerabilityAssessmentLab />)
      
      await user.click(screen.getByText('🔍 Vulnerability Scanner'))
      
      // Should offer different educational scan options
      expect(screen.getAllByText(/scanner/i)).toHaveLength(3) // Button, content header, and interface message
    })
  })

  // ===============================
  // 6. DATA HANDLING & STATE MANAGEMENT
  // ===============================

  describe('💾 Data Handling & State Management', () => {
    test('manages scan state correctly', () => {
      render(<VulnerabilityAssessmentLab />)
      
      // Component should render without errors
      expect(screen.getByText('🔍 Vulnerability Assessment Lab')).toBeInTheDocument()
    })

    test('handles tab navigation state', async () => {
      const user = userEvent.setup()
      render(<VulnerabilityAssessmentLab />)
      
      const reportsTab = screen.getByText('📋 Security Reports')
      await user.click(reportsTab)
      
      // Should update active tab state
      expect(reportsTab).toHaveClass('bg-red-500')
    })

    test('preserves educational data across navigation', async () => {
      const user = userEvent.setup()
      render(<VulnerabilityAssessmentLab />)
      
      // Navigate between tabs
      await user.click(screen.getByRole('button', { name: /🎯 Scan Targets/i }))
      await user.click(screen.getByText('📊 Security Dashboard'))
      
      // Should maintain component state
      expect(screen.getByText('📊 Security Dashboard')).toHaveClass('bg-red-500')
    })

    test('handles scan results appropriately', async () => {
      render(<VulnerabilityAssessmentLab />)
      
      await act(async () => {
        await new Promise(resolve => setTimeout(resolve, 100))
      })
      
      // Should handle scan data without errors
      expect(screen.getByText('🔍 Vulnerability Assessment Lab')).toBeInTheDocument()
    })

    test('manages vulnerability database safely', () => {
      render(<VulnerabilityAssessmentLab />)
      
      // Should initialize educational vulnerability data
      expect(screen.getByText('🔍 Vulnerability Assessment Lab')).toBeInTheDocument()
    })
  })

  // ===============================
  // 7. TEACHER TOOLS & CLASSROOM INTEGRATION
  // ===============================

  describe('👩‍🏫 Teacher Tools & Classroom Integration', () => {
    test('provides educational content overview', async () => {
      const user = userEvent.setup()
      render(<VulnerabilityAssessmentLab />)
      
      await user.click(screen.getByText('🎓 Learn Vulnerability Assessment'))
      
      // Should provide teacher-appropriate content overview
      expect(screen.getByText(/Learn Vulnerability Assessment/i)).toBeInTheDocument()
    })

    test('includes curriculum-aligned learning objectives', async () => {
      const user = userEvent.setup()
      render(<VulnerabilityAssessmentLab />)
      
      await user.click(screen.getByText('🎓 Learn Vulnerability Assessment'))
      
      // Should mention educational standards and objectives
      expect(screen.getByText(/cybersecurity/i)).toBeInTheDocument()
    })

    test('offers assessment and reporting features', async () => {
      const user = userEvent.setup()
      render(<VulnerabilityAssessmentLab />)
      
      await user.click(screen.getByText('📋 Security Reports'))
      
      // Should provide teacher-friendly reporting
      expect(screen.getAllByText(/reports/i)).toHaveLength(4) // Button, header, description, interface message
    })

    test('supports classroom demonstration mode', () => {
      render(<VulnerabilityAssessmentLab />)
      
      // Should be suitable for classroom presentation
      expect(screen.getByText('🔍 Vulnerability Assessment Lab')).toHaveClass('text-4xl')
    })

    test('provides student progress tracking capabilities', async () => {
      const user = userEvent.setup()
      render(<VulnerabilityAssessmentLab />)
      
      await user.click(screen.getByText('📊 Security Dashboard'))
      
      // Should show educational metrics
      expect(screen.getByText(/dashboard/i)).toBeInTheDocument()
    })
  })

  // ===============================
  // 8. PERFORMANCE & RELIABILITY
  // ===============================

  describe('⚡ Performance & Reliability', () => {
    test('renders without performance issues', () => {
      const start = performance.now()
      render(<VulnerabilityAssessmentLab />)
      const end = performance.now()
      
      // Should render quickly for educational use
      expect(end - start).toBeLessThan(1000) // Less than 1 second
    })

    test('handles rapid tab switching gracefully', async () => {
      const user = userEvent.setup()
      render(<VulnerabilityAssessmentLab />)
      
      // Rapidly switch between tabs
      await user.click(screen.getByRole('button', { name: /🎯 Scan Targets/i }))
      await user.click(screen.getByText('🔍 Vulnerability Scanner'))
      await user.click(screen.getByText('📋 Security Reports'))
      
      // Should handle rapid navigation without errors
      expect(screen.getByText('📋 Security Reports')).toHaveClass('bg-red-500')
    })

    test('manages memory efficiently with educational data', async () => {
      render(<VulnerabilityAssessmentLab />)
      
      await act(async () => {
        // Simulate multiple scan operations
        await new Promise(resolve => setTimeout(resolve, 100))
      })
      
      // Should not crash or slow down
      expect(screen.getByText('🔍 Vulnerability Assessment Lab')).toBeInTheDocument()
    })

    test('provides responsive design for different devices', () => {
      render(<VulnerabilityAssessmentLab />)
      
      // Should use responsive CSS classes
      const mainContainer = screen.getByText('🔍 Vulnerability Assessment Lab').closest('div')?.parentElement
      expect(mainContainer).toHaveClass('max-w-7xl')
    })

    test('gracefully handles educational data loading', async () => {
      render(<VulnerabilityAssessmentLab />)
      
      await waitFor(() => {
        expect(screen.getByText('🔍 Vulnerability Assessment Lab')).toBeInTheDocument()
      })
    })
  })

  // ===============================
  // 9. INTEGRATION WITH SECURITY SYSTEMS
  // ===============================

  describe('🔗 Integration with Security Systems', () => {
    test('maintains educational isolation from real systems', () => {
      render(<VulnerabilityAssessmentLab />)
      
      // Should not connect to real security databases
      expect(screen.queryByText(/production/i)).not.toBeInTheDocument()
      expect(screen.queryByText(/live/i)).not.toBeInTheDocument()
    })

    test('uses simulated security data appropriately', async () => {
      const user = userEvent.setup()
      render(<VulnerabilityAssessmentLab />)
      
      await user.click(screen.getByRole('button', { name: /🎯 Scan Targets/i }))
      
      // Should use clearly educational/simulated data
      await waitFor(() => {
        expect(screen.getByText(/demo targets/i)).toBeInTheDocument()
      })
    })

    test('provides safe learning environment', () => {
      render(<VulnerabilityAssessmentLab />)
      
      // Should not provide access to real attack tools
      expect(screen.queryByText(/penetration/i)).not.toBeInTheDocument()
      expect(screen.queryByText(/hack/i)).not.toBeInTheDocument() // No hacking terminology
    })

    test('integrates with educational security monitoring', async () => {
      render(<VulnerabilityAssessmentLab />)
      
      await act(async () => {
        await new Promise(resolve => setTimeout(resolve, 50))
      })
      
      // Should work safely with educational monitoring systems
      expect(screen.getByText('🔍 Vulnerability Assessment Lab')).toBeInTheDocument()
    })

    test('supports educational audit logging', () => {
      render(<VulnerabilityAssessmentLab />)
      
      // Should work with educational audit systems
      expect(screen.getByText('🔍 Vulnerability Assessment Lab')).toBeInTheDocument()
    })
  })

  // ===============================
  // 10. EDUCATIONAL LEARNING OUTCOMES
  // ===============================

  describe('🎯 Educational Learning Outcomes', () => {
    test('demonstrates OWASP Top 10 awareness', async () => {
      const user = userEvent.setup()
      render(<VulnerabilityAssessmentLab />)
      
      await user.click(screen.getByText('🎓 Learn Vulnerability Assessment'))
      
      // Should reference industry-standard security frameworks
      await waitFor(() => {
        expect(screen.getAllByText(/OWASP/i)).toHaveLength(2) // Header and list item
      }, { timeout: 2000 })
    })

    test('teaches proper vulnerability assessment methodology', async () => {
      const user = userEvent.setup()
      render(<VulnerabilityAssessmentLab />)
      
      await user.click(screen.getByText('🎓 Learn Vulnerability Assessment'))
      
      // Should teach systematic security assessment
      expect(screen.getAllByText(/assessment/i)).toHaveLength(10) // Multiple references in learning content
    })

    test('introduces real cybersecurity career paths', async () => {
      const user = userEvent.setup()
      render(<VulnerabilityAssessmentLab />)
      
      await user.click(screen.getByText('🎓 Learn Vulnerability Assessment'))
      
      // Should mention legitimate career opportunities
      expect(screen.getByText(/career/i)).toBeInTheDocument()
    })

    test('emphasizes ethical security practices', async () => {
      const user = userEvent.setup()
      render(<VulnerabilityAssessmentLab />)
      
      await user.click(screen.getByText('🎓 Learn Vulnerability Assessment'))
      
      // Should include ethical guidance
      expect(screen.getByText((content, element) => {
        return content.includes('protection') || content.includes('safer') || content.includes('secure')
      })).toBeInTheDocument()
    })

    test('provides hands-on learning through simulation', async () => {
      const user = userEvent.setup()
      render(<VulnerabilityAssessmentLab />)
      
      await user.click(screen.getByText('🔍 Vulnerability Scanner'))
      
      // Should offer interactive learning experience
      expect(screen.getAllByText(/scanner/i)).toHaveLength(3) // Tab, header, and content
    })

    test('connects theoretical knowledge to practical application', async () => {
      const user = userEvent.setup()
      render(<VulnerabilityAssessmentLab />)
      
      await user.click(screen.getByText('🎓 Learn Vulnerability Assessment'))
      
      // Should bridge theory and practice
      expect(screen.getAllByText(/professional/i)).toHaveLength(2) // Multiple references
      expect(screen.getAllByText(/tools/i)).toHaveLength(2) // Multiple tool references
    })

    test('encourages continued cybersecurity learning', async () => {
      const user = userEvent.setup()
      render(<VulnerabilityAssessmentLab />)
      
      await user.click(screen.getByText('🎓 Learn Vulnerability Assessment'))
      
      // Should motivate further learning
      expect(screen.getByText(/skills to develop/i)).toBeInTheDocument()
    })

    test('builds security awareness for digital citizenship', async () => {
      const user = userEvent.setup()
      render(<VulnerabilityAssessmentLab />)
      
      await user.click(screen.getByText('🎓 Learn Vulnerability Assessment'))
      
      // Should promote responsible digital citizenship
      expect(screen.getByText((content, element) => {
        return content.includes('secure') || content.includes('safety') || content.includes('protection')
      })).toBeInTheDocument()
    })
  })
})
