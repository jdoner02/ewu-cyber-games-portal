'use client'import React, { useState, useEffect, useRef } from 'react'import { motion, AnimatePresence } from 'framer-motion'import * as d3 from 'd3'// Educational Monster Types - GenCyber Alignedinterface Monster {  id: string  name: string  type: 'cyber-fundamentals' | 'hardware-fundamentals' | 'cryptography' | 'network-security' | 'security-frameworks' | 'ethics-law'  rarity: 'common' | 'uncommon' | 'rare' | 'legendary'  baseStats: {    hp: number    attack: number    defense: number    speed: number  }  description: string  abilities: string[]  evolvesTo: string | null  learningObjectives: string[]  knowledgeArea: string  gencyber_standard: string  hands_on_activity: string  career_connection: string  ewu_pathway: string}interface SkillNode {  id: string  name: string  description: string  category: 'cia-triad' | 'cryptography' | 'network-security' | 'hardware-security' | 'security-frameworks' | 'ethics-law'  level: number  unlocked: boolean  prerequisites: string[]  rewards: {    monsters?: string[]    badges?: string[]  }}interface Badge {  id: string  name: string  description: string  icon: string  rarity: 'bronze' | 'silver' | 'gold' | 'platinum'  earned: boolean  requirements: string  gencyber_alignment: string  career_relevance: string}interface PlayerProgress {  level: number  experience: number  totalExperience: number  unlockedNodes: string[]  collectedMonsters: string[]  earnedBadges: string[]  completedActivities: string[]  cyberScoutRank: string  currentRegion: string}const CyberKnowledgeBrainGame: React.FC = () => {  const [gameMode, setGameMode] = useState<'exploration' | 'collection' | 'skillTree' | 'badges'>('exploration')  const [playerProgress, setPlayerProgress] = useState<PlayerProgress>({    level: 1,    experience: 0,    totalExperience: 0,    unlockedNodes: ['cia-triad-basics'],    collectedMonsters: [],    earnedBadges: [],    completedActivities: [],    cyberScoutRank: 'Novice Scout',    currentRegion: 'Fundamentals Island'  })    const [selectedMonster, setSelectedMonster] = useState<Monster | null>(null)  const [showMonsterDetails, setShowMonsterDetails] = useState(false)  const [isCollecting, setIsCollecting] = useState(false)  const [discoveryAnimation, setDiscoveryAnimation] = useState<string | null>(null)  // Enhanced Monster Database - GenCyber Educational Framework  const monsterDatabase: Monster[] = [    // CIA Triad Foundation Family    {      id: 'confidentia',      name: 'Confidentia',      type: 'cyber-fundamentals',      rarity: 'common',      baseStats: { hp: 45, attack: 35, defense: 40, speed: 55 },      description: 'A secretive creature that embodies information confidentiality. Only authorized users can access its hidden knowledge.',      abilities: ['Access Control', 'Data Classification', 'Privacy Shield'],      evolvesTo: 'encryptasaurus',      learningObjectives: [        'Define confidentiality in the CIA security triad',        'Identify access control mechanisms',        'Explain data classification principles'      ],      knowledgeArea: 'CIA Triad',      gencyber_standard: 'Cybersecurity Principles',      hands_on_activity: 'Password Policy Workshop',      career_connection: 'Information Security Analyst',      ewu_pathway: 'Cybersecurity Fundamentals → Security Operations'    },    {      id: 'integron',      name: 'Integron',      type: 'cyber-fundamentals',      rarity: 'common',      baseStats: { hp: 50, attack: 40, defense: 45, speed: 50 },      description: 'Guardian of data integrity, this creature ensures information remains unaltered and trustworthy.',      abilities: ['Hash Verification', 'Checksum Validation', 'Version Control'],      evolvesTo: 'validatron',      learningObjectives: [        'Explain data integrity requirements',        'Demonstrate hash function applications',        'Identify integrity threats and controls'      ],      knowledgeArea: 'CIA Triad',      gencyber_standard: 'Cybersecurity Principles',      hands_on_activity: 'File Integrity Monitoring Lab',      career_connection: 'Security Auditor',      ewu_pathway: 'Security Analysis → Risk Assessment'    },    {      id: 'availabeast',      name: 'Availabeast',      type: 'cyber-fundamentals',      rarity: 'common',      baseStats: { hp: 60, attack: 30, defense: 35, speed: 65 },      description: 'High-energy creature ensuring systems stay online. When services go down, it springs into action!',      abilities: ['Load Balancing', 'Redundancy Design', 'Disaster Recovery'],      evolvesTo: 'uptimemon',      learningObjectives: [        'Define system availability requirements',        'Design high-availability architectures',        'Plan business continuity strategies'      ],      knowledgeArea: 'CIA Triad',      gencyber_standard: 'System Administration',      hands_on_activity: 'Server Uptime Monitoring',      career_connection: 'Systems Administrator',      ewu_pathway: 'Infrastructure Security → Business Continuity'    },    // Hardware Security Family    {      id: 'motherboardmon',      name: 'MotherBoard-mon',      type: 'hardware-fundamentals',      rarity: 'common',      baseStats: { hp: 70, attack: 40, defense: 60, speed: 30 },      description: 'The foundation creature connecting all hardware components. Its pathways carry critical data flows.',      abilities: ['Component Integration', 'Bus Architecture', 'Port Management'],      evolvesTo: 'systemmax',      learningObjectives: [        'Identify motherboard components and functions',        'Understand computer architecture basics',        'Recognize hardware security vulnerabilities'      ],      knowledgeArea: 'Hardware Fundamentals',      gencyber_standard: 'Hardware/Software',      hands_on_activity: 'Motherboard Assembly Lab',      career_connection: 'Hardware Security Specialist',      ewu_pathway: 'Hardware Security → Embedded Systems Security'    },    // Cryptography Evolution Line    {      id: 'encryptasaurus',      name: 'Encryptasaurus',      type: 'cryptography',      rarity: 'uncommon',      baseStats: { hp: 65, attack: 70, defense: 60, speed: 75 },      description: 'Evolved from Confidentia, this crypto-beast transforms plaintext into unbreakable ciphertext.',      abilities: ['AES Encryption', 'Key Management', 'Algorithm Selection'],      evolvesTo: 'quantumcrypt',      learningObjectives: [        'Implement symmetric encryption algorithms',        'Design secure key management systems',        'Compare encryption algorithm strengths'      ],      knowledgeArea: 'Cryptography',      gencyber_standard: 'Cryptography',      hands_on_activity: 'Encryption Implementation Challenge',      career_connection: 'Cryptography Engineer',      ewu_pathway: 'Applied Cryptography → Security Research'    },    // Network Security Family    {      id: 'firewalldragon',      name: 'Firewall Dragon',      type: 'network-security',      rarity: 'uncommon',      baseStats: { hp: 80, attack: 45, defense: 90, speed: 40 },      description: 'Mighty guardian filtering network traffic with rule-based precision. Blocks malicious packets with fire breath.',      abilities: ['Packet Filtering', 'Stateful Inspection', 'Application Control'],      evolvesTo: 'ngfwleviathan',      learningObjectives: [        'Configure firewall rules and policies',        'Analyze network traffic patterns',        'Implement network segmentation'      ],      knowledgeArea: 'Network Security',      gencyber_standard: 'Networks and the Internet',      hands_on_activity: 'Firewall Configuration Workshop',      career_connection: 'Network Security Engineer',      ewu_pathway: 'Network Security → Infrastructure Design'    },    // Legendary Framework Creatures    {      id: 'zerotrust_leviathan',      name: 'Zero Trust Leviathan',      type: 'security-frameworks',      rarity: 'legendary',      baseStats: { hp: 100, attack: 95, defense: 110, speed: 90 },      description: 'Ultimate security framework embodiment. Never trusts, always verifies. Masters microsegmentation and least privilege.',      abilities: ['Never Trust Always Verify', 'Least Privilege', 'Continuous Monitoring'],      evolvesTo: null,      learningObjectives: [        'Design Zero Trust security architectures',        'Implement identity-based security',        'Deploy microsegmentation strategies'      ],      knowledgeArea: 'Security Frameworks',      gencyber_standard: 'Cybersecurity Principles',      hands_on_activity: 'Zero Trust Network Design Challenge',      career_connection: 'Security Architect',      ewu_pathway: 'Advanced Security Architecture → Research Leadership'    },    {      id: 'ethicalguardian',      name: 'Ethical Guardian',      type: 'ethics-law',      rarity: 'legendary',      baseStats: { hp: 90, attack: 70, defense: 85, speed: 75 },      description: 'Wise protector of digital rights and privacy. Guides cybersecurity professionals in ethical decision-making.',      abilities: ['Responsible Disclosure', 'Privacy by Design', 'Legal Compliance'],      evolvesTo: null,      learningObjectives: [        'Apply ethical frameworks to security decisions',        'Navigate legal and regulatory requirements',        'Balance security with privacy rights'      ],      knowledgeArea: 'Ethics and Law',      gencyber_standard: 'Cybersecurity Principles',      hands_on_activity: 'Ethical Hacking Scenario Workshop',      career_connection: 'Chief Information Security Officer',      ewu_pathway: 'Security Leadership → Policy Development'    }  ]  // Educational Skill Tree Nodes - GenCyber Aligned  const skillNodes: SkillNode[] = [    {      id: 'cia-triad-basics',      name: 'CIA Triad Fundamentals',      description: 'Master the foundational principles of cybersecurity: Confidentiality, Integrity, and Availability.',      category: 'cia-triad',      level: 1,      unlocked: true,      prerequisites: [],      rewards: {        monsters: ['confidentia', 'integron', 'availabeast'],        badges: ['cia-foundation']      }    },    {      id: 'hardware-security-foundation',      name: 'Hardware Security Fundamentals',      description: 'Understand physical computing components and their security implications.',      category: 'hardware-security',      level: 2,      unlocked: false,      prerequisites: ['cia-triad-basics'],      rewards: {        monsters: ['motherboardmon'],        badges: ['hardware-expert']      }    },    {      id: 'cryptography-fundamentals',      name: 'Cryptography Basics',      description: 'Learn the mathematics and implementation of cryptographic systems.',      category: 'cryptography',      level: 3,      unlocked: false,      prerequisites: ['cia-triad-basics'],      rewards: {        monsters: ['encryptasaurus'],        badges: ['crypto-novice']      }    },    {      id: 'network-security-architecture',      name: 'Network Security Architecture',      description: 'Design and implement comprehensive network security solutions.',      category: 'network-security',      level: 4,      unlocked: false,      prerequisites: ['hardware-security-foundation', 'cryptography-fundamentals'],      rewards: {        monsters: ['firewalldragon'],        badges: ['network-guardian']      }    },    {      id: 'advanced-security-frameworks',      name: 'Advanced Security Frameworks',      description: 'Master enterprise security frameworks like Zero Trust and defense-in-depth.',      category: 'security-frameworks',      level: 5,      unlocked: false,      prerequisites: ['network-security-architecture'],      rewards: {        monsters: ['zerotrust_leviathan'],        badges: ['framework-master']      }    },    {      id: 'cybersecurity-ethics-law',      name: 'Cybersecurity Ethics and Law',      description: 'Navigate the ethical and legal landscape of cybersecurity.',      category: 'ethics-law',      level: 6,      unlocked: false,      prerequisites: ['advanced-security-frameworks'],      rewards: {        monsters: ['ethicalguardian'],        badges: ['ethical-leader']      }    }  ]  // Educational Badges - GenCyber Career Aligned  const badges: Badge[] = [    {      id: 'cia-foundation',      name: 'CIA Foundation',      description: 'Mastered the fundamental principles of cybersecurity: Confidentiality, Integrity, and Availability.',      icon: '🛡️',      rarity: 'bronze',      earned: false,      requirements: 'Complete CIA Triad Fundamentals module and hands-on workshop',      gencyber_alignment: 'Cybersecurity Principles - CIA Triad',      career_relevance: 'Essential foundation for all cybersecurity roles'    },    {      id: 'hardware-expert',      name: 'Hardware Security Expert',      description: 'Demonstrated deep understanding of computer hardware security and assembly.',      icon: '🔧',      rarity: 'silver',      earned: false,      requirements: 'Complete hardware assembly lab and security vulnerability assessment',      gencyber_alignment: 'Hardware/Software - Physical Security',      career_relevance: 'Hardware Security Specialist, Embedded Systems Engineer'    },    {      id: 'crypto-novice',      name: 'Cryptography Novice',      description: 'Successfully implemented encryption algorithms and key management systems.',      icon: '🔐',      rarity: 'silver',      earned: false,      requirements: 'Implement AES encryption and design public key infrastructure',      gencyber_alignment: 'Cryptography - Symmetric and Asymmetric Encryption',      career_relevance: 'Cryptography Engineer, Security Software Developer'    },    {      id: 'network-guardian',      name: 'Network Guardian',      description: 'Architected comprehensive network security solutions with defense-in-depth.',      icon: '🌐',      rarity: 'gold',      earned: false,      requirements: 'Design enterprise network security and respond to simulated attacks',      gencyber_alignment: 'Networks and the Internet - Network Security',      career_relevance: 'Network Security Engineer, SOC Analyst'    },    {      id: 'framework-master',      name: 'Framework Master',      description: 'Mastered advanced security frameworks including Zero Trust architecture.',      icon: '🏛️',      rarity: 'gold',      earned: false,      requirements: 'Present Zero Trust migration plan and implement microsegmentation',      gencyber_alignment: 'Cybersecurity Principles - Advanced Frameworks',      career_relevance: 'Security Architect, Chief Information Security Officer'    },    {      id: 'ethical-leader',      name: 'Ethical Leadership',      description: 'Demonstrated ability to navigate complex ethical and legal cybersecurity challenges.',      icon: '⚖️',      rarity: 'platinum',      earned: false,      requirements: 'Complete ethical hacking scenarios and draft responsible disclosure policy',      gencyber_alignment: 'Cybersecurity Principles - Ethics and Legal Compliance',      career_relevance: 'Chief Information Security Officer, Cybersecurity Consultant'    }  ]  // Helper function to get monster emoji based on type  const getMonsterEmoji = (type: Monster['type']): string => {    const emojiMap = {      'cyber-fundamentals': '🛡️',      'hardware-fundamentals': '🔧',      'cryptography': '🔐',      'network-security': '🌐',      'security-frameworks': '🏛️',      'ethics-law': '⚖️'    }    return emojiMap[type] || '❓'  }  // Helper function to get rarity color  const getRarityColor = (rarity: Monster['rarity']): string => {    const colorMap = {      common: 'text-gray-400',      uncommon: 'text-green-400',      rare: 'text-blue-400',      legendary: 'text-purple-400'    }    return colorMap[rarity] || 'text-gray-400'  }  // Monster collection function  const collectMonster = (monsterId: string) => {    const monster = monsterDatabase.find(m => m.id === monsterId)    if (!monster) return    setSelectedMonster(monster)    setIsCollecting(true)    setShowMonsterDetails(true)        setPlayerProgress(prev => ({      ...prev,      collectedMonsters: [...prev.collectedMonsters, monsterId]    }))    setTimeout(() => {      setIsCollecting(false)      setDiscoveryAnimation(monsterId)      setTimeout(() => setDiscoveryAnimation(null), 2000)    }, 1500)  }  // Educational activity completion  const completeActivity = (nodeId: string) => {    const node = skillNodes.find(n => n.id === nodeId)    if (!node) return    // Award monsters    if (node.rewards.monsters) {      node.rewards.monsters.forEach(monsterId => {        collectMonster(monsterId)      })    }    // Award badges    if (node.rewards.badges) {      setPlayerProgress(prev => ({        ...prev,        earnedBadges: [...prev.earnedBadges, ...node.rewards.badges!]      }))    }    // Mark as completed    setPlayerProgress(prev => ({      ...prev,      completedActivities: [...prev.completedActivities, nodeId],      experience: prev.experience + (node.level * 100),      totalExperience: prev.totalExperience + (node.level * 100)    }))    // Unlock next nodes    skillNodes.forEach(skillNode => {      if (skillNode.prerequisites.includes(nodeId)) {        skillNode.unlocked = true      }    })  }  return (    <div className="min-h-screen bg-gradient-to-br from-blue-900 via-purple-900 to-indigo-900 text-white p-4">      {/* Header */}      <div className="flex justify-between items-center mb-6">        <div>          <h1 className="text-3xl font-bold">🧠 Cyber Knowledge Brain</h1>          <p className="text-blue-300">GenCyber Educational Pokemon MMO</p>        </div>        <div className="text-right">          <p className="text-lg font-bold">Level {playerProgress.level}</p>          <p className="text-sm text-gray-300">{playerProgress.cyberScoutRank}</p>        </div>      </div>      {/* Navigation */}      <div className="flex space-x-4 mb-6">        {(['exploration', 'collection', 'skillTree', 'badges'] as const).map(mode => (          <button            key={mode}            onClick={() => setGameMode(mode)}            className={`px-4 py-2 rounded-lg font-medium transition-colors ${              gameMode === mode                 ? 'bg-blue-600 text-white'                 : 'bg-white/10 text-gray-300 hover:bg-white/20'            }`}          >            {mode === 'exploration' && '🌍 Explore'}            {mode === 'collection' && '📚 Collection'}            {mode === 'skillTree' && '🌳 Skills'}            {mode === 'badges' && '🏆 Badges'}          </button>        ))}      </div>      {/* Game Content */}      <AnimatePresence mode="wait">        {gameMode === 'exploration' && (          <motion.div            key="exploration"            initial={{ opacity: 0, y: 20 }}            animate={{ opacity: 1, y: 0 }}            exit={{ opacity: 0, y: -20 }}            className="space-y-6"          >            <div className="bg-white/10 backdrop-blur-sm rounded-xl p-6 border border-white/20">              <h2 className="text-2xl font-bold mb-4">🎯 Current Mission</h2>              <p className="text-lg mb-4">Welcome to the GenCyber Cyber Knowledge Brain!</p>              <p className="text-gray-300 mb-4">                Your mission: Collect knowledge monsters by mastering cybersecurity concepts.                 Each creature represents a real cybersecurity principle aligned with GenCyber standards.              </p>              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">                {skillNodes.filter(node => node.unlocked).map(node => (                  <div key={node.id} className="bg-white/5 rounded-lg p-4">                    <h3 className="font-bold text-lg mb-2">{node.name}</h3>                    <p className="text-sm text-gray-300 mb-3">{node.description}</p>                    <button                      onClick={() => completeActivity(node.id)}                      className="w-full bg-green-600 hover:bg-green-700 px-4 py-2 rounded-lg font-medium transition-colors"                    >                      Start Learning Activity                    </button>                  </div>                ))}              </div>            </div>          </motion.div>        )}        {gameMode === 'collection' && (          <motion.div            key="collection"            initial={{ opacity: 0, y: 20 }}            animate={{ opacity: 1, y: 0 }}            exit={{ opacity: 0, y: -20 }}            className="space-y-6"          >            <div className="bg-white/10 backdrop-blur-sm rounded-xl p-6 border border-white/20">              <h2 className="text-2xl font-bold mb-4">📚 Monster Collection</h2>              <p className="text-lg mb-4">                Collected: {playerProgress.collectedMonsters.length}/{monsterDatabase.length} monsters              </p>              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">                {monsterDatabase.map(monster => {                  const isCollected = playerProgress.collectedMonsters.includes(monster.id)                  return (                    <div                       key={monster.id}                       className={`rounded-lg p-4 border ${                        isCollected                           ? 'bg-white/10 border-white/30'                           : 'bg-gray-800/50 border-gray-600'                      }`}                    >                      <div className="text-4xl mb-2">{getMonsterEmoji(monster.type)}</div>                      <h3 className={`font-bold ${isCollected ? getRarityColor(monster.rarity) : 'text-gray-500'}`}>                        {isCollected ? monster.name : '???'}                      </h3>                      {isCollected && (                        <>                          <p className="text-sm text-gray-300 mb-2">{monster.description}</p>                          <div className="text-xs space-y-1">                            <p><strong>Knowledge Area:</strong> {monster.knowledgeArea}</p>                            <p><strong>Career:</strong> {monster.career_connection}</p>                          </div>                        </>                      )}                    </div>                  )                })}              </div>            </div>          </motion.div>        )}        {gameMode === 'skillTree' && (          <motion.div            key="skillTree"            initial={{ opacity: 0, y: 20 }}            animate={{ opacity: 1, y: 0 }}            exit={{ opacity: 0, y: -20 }}            className="space-y-6"          >            <div className="bg-white/10 backdrop-blur-sm rounded-xl p-6 border border-white/20">              <h2 className="text-2xl font-bold mb-4">🌳 Cybersecurity Skill Tree</h2>              <p className="text-gray-300 mb-6">Progress through educational pathways to unlock advanced monsters and career opportunities.</p>              <div className="space-y-4">                {skillNodes.map(node => (                  <div                     key={node.id}                     className={`p-4 rounded-lg border ${                      node.unlocked                         ? 'bg-green-500/20 border-green-500/50'                         : 'bg-gray-500/20 border-gray-500/50'                    }`}                  >                    <div className="flex justify-between items-start">                      <div>                        <h3 className="font-bold text-lg">{node.name}</h3>                        <p className="text-sm text-gray-300">{node.description}</p>                        <p className="text-xs text-blue-300 mt-1">Level {node.level} • {node.category}</p>                      </div>                      <div className="text-right">                        {node.unlocked ? (                          <span className="px-2 py-1 bg-green-600 rounded text-xs">Available</span>                        ) : (                          <span className="px-2 py-1 bg-gray-600 rounded text-xs">Locked</span>                        )}                      </div>                    </div>                    {node.rewards.monsters && (                      <div className="mt-2">                        <p className="text-xs text-yellow-300">Rewards: {node.rewards.monsters.join(', ')}</p>                      </div>                    )}                  </div>                ))}              </div>            </div>          </motion.div>        )}        {gameMode === 'badges' && (          <motion.div            key="badges"            initial={{ opacity: 0, y: 20 }}            animate={{ opacity: 1, y: 0 }}            exit={{ opacity: 0, y: -20 }}            className="space-y-6"          >            <div className="bg-white/10 backdrop-blur-sm rounded-xl p-6 border border-white/20">              <h2 className="text-2xl font-bold mb-4">🏆 Achievement Badges</h2>              <p className="text-gray-300 mb-6">Earn professional badges aligned with cybersecurity career pathways.</p>              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">                {badges.map(badge => {                  const isEarned = playerProgress.earnedBadges.includes(badge.id)                  return (                    <div                       key={badge.id}                       className={`p-4 rounded-lg border ${                        isEarned                           ? 'bg-yellow-500/20 border-yellow-500/50'                           : 'bg-gray-500/20 border-gray-500/50'                      }`}                    >                      <div className="text-4xl mb-2">{badge.icon}</div>                      <h3 className="font-bold">{badge.name}</h3>                      <p className="text-sm text-gray-300 mb-2">{badge.description}</p>                      <div className="text-xs space-y-1">                        <p><strong>Standards:</strong> {badge.gencyber_alignment}</p>                        <p><strong>Career:</strong> {badge.career_relevance}</p>                        <p><strong>Requirements:</strong> {badge.requirements}</p>                      </div>                    </div>                  )                })}              </div>            </div>          </motion.div>        )}      </AnimatePresence>      {/* Monster Details Modal */}      <AnimatePresence>        {showMonsterDetails && selectedMonster && (          <motion.div            initial={{ opacity: 0 }}            animate={{ opacity: 1 }}            exit={{ opacity: 0 }}            className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50"            onClick={() => setShowMonsterDetails(false)}          >            <motion.div              initial={{ scale: 0.8 }}              animate={{ scale: 1 }}              exit={{ scale: 0.8 }}              className="bg-gray-900 rounded-xl p-6 max-w-md w-full border border-white/20"              onClick={(e) => e.stopPropagation()}            >              <div className="text-center mb-4">                <div className="text-6xl mb-2">{getMonsterEmoji(selectedMonster.type)}</div>                <h2 className={`text-2xl font-bold ${getRarityColor(selectedMonster.rarity)}`}>                  {selectedMonster.name}                </h2>                <p className="text-gray-400 capitalize">{selectedMonster.rarity} {selectedMonster.type}</p>              </div>                            <div className="space-y-4">                <p className="text-gray-300">{selectedMonster.description}</p>                                <div>                  <h3 className="font-bold mb-2">Learning Objectives:</h3>                  <ul className="text-sm text-gray-300 space-y-1">                    {selectedMonster.learningObjectives.map((objective, index) => (                      <li key={index}>• {objective}</li>                    ))}                  </ul>                </div>                <div>                  <h3 className="font-bold mb-2">Career Connection:</h3>                  <p className="text-sm text-blue-300">{selectedMonster.career_connection}</p>                </div>                <div>                  <h3 className="font-bold mb-2">EWU Pathway:</h3>                  <p className="text-sm text-green-300">{selectedMonster.ewu_pathway}</p>                </div>              </div>              <button                onClick={() => setShowMonsterDetails(false)}                className="w-full mt-6 bg-blue-600 hover:bg-blue-700 px-4 py-2 rounded-lg font-medium transition-colors"              >                Close              </button>            </motion.div>          </motion.div>        )}      </AnimatePresence>    </div>  )}export default CyberKnowledgeBrainGame