/**
 * üîç VULNERABILITY ASSESSMENT SCANNER - Educational Security Tool
 * üöß STATUS: UNFINISHED - Educational Implementation
 * 
 * Welcome to the world of vulnerability assessment! üöÄ
 * 
 * WHAT IS VULNERABILITY ASSESSMENT? ü§î
 * Think of this like being a security detective who looks for weaknesses in computer 
 * systems before the bad guys find them! Just like how you might check your house for 
 * unlocked windows or broken locks, cybersecurity professionals scan computer systems 
 * for security weaknesses.
 * 
 * WHY IS THIS SUPER IMPORTANT? üåü
 * - Find security problems before attackers do
 * - Protect sensitive information like grades, personal data, financial records
 * - Meet security requirements for schools, businesses, and organizations
 * - Prevent data breaches that could hurt people
 * - Build trust with users that their information is safe
 * 
 * REAL-WORLD VULNERABILITY TYPES:
 * üîì Software Bugs: Programming mistakes that create security holes
 * üîë Weak Passwords: Easy-to-guess passwords that attackers can crack
 * üì° Network Issues: Unsecured network connections or services
 * üóÑÔ∏è Database Problems: Unprotected databases with sensitive information
 * üåê Web App Flaws: Security issues in websites and web applications
 * üì± Mobile Security: Weaknesses in smartphone and tablet apps
 * 
 * FOR STUDENT DEVELOPERS: üë©‚Äçüíªüë®‚Äçüíª
 * This tool shows you how professional security scanners work! Companies like 
 * Microsoft, Apple, and Google use similar tools to find vulnerabilities in their 
 * products. You'll learn about CVE (Common Vulnerabilities and Exposures) databases, 
 * CVSS scoring, and automated security testing - all real skills used in cybersecurity careers!
 * 
 * HOW PROS USE THIS:
 * - Security teams run scans regularly to find new vulnerabilities
 * - Developers use these tools during code review processes
 * - IT administrators scan networks and servers for security issues
 * - Bug bounty hunters use similar techniques to find security flaws
 * - Compliance auditors verify that security standards are met
 */

'use client'

import { useState, useEffect, useCallback } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { 
  Search, 
  AlertTriangle, 
  CheckCircle, 
  XCircle,
  Shield,
  Activity,
  Database,
  Globe,
  Server,
  Smartphone,
  Lock,
  Unlock,
  Eye,
  Play,
  Pause,
  RotateCcw,
  Download,
  FileText,
  BarChart3,
  TrendingUp,
  Users,
  Clock,
  Target,
  Zap,
  Bug,
  Key,
  Wifi,
  HardDrive,
  Code,
  Monitor
} from 'lucide-react'
import { toast } from 'sonner'

/**
 * üéØ VULNERABILITY DATA STRUCTURES
 * 
 * These TypeScript interfaces define how we organize vulnerability information.
 * Real vulnerability scanners use similar data structures!
 */

// üêõ Individual Vulnerability Information
interface Vulnerability {
  id: string                    // Unique identifier (like CVE-2024-1234)
  title: string                 // Human-readable name
  description: string           // What the vulnerability is
  severity: 'info' | 'low' | 'medium' | 'high' | 'critical'  // How dangerous it is
  cvssScore: number            // Standard vulnerability scoring (0.0-10.0)
  category: VulnerabilityCategory  // What type of vulnerability
  affectedComponent: string     // What part of the system is affected
  discoveredDate: Date         // When we found it
  status: 'new' | 'confirmed' | 'false_positive' | 'fixed' | 'accepted_risk'
  remediation: string          // How to fix it
  references: string[]         // Links to more information
  exploitComplexity: 'low' | 'medium' | 'high'  // How hard it is to exploit
  riskRating: number          // Our calculated risk score (0-100)
  technicalDetails: string    // Detailed technical information
}

// üè∑Ô∏è Vulnerability Categories (Types of security problems)
type VulnerabilityCategory = 
  | 'injection'              // SQL injection, command injection, etc.
  | 'authentication'         // Weak passwords, broken auth, etc.
  | 'session_management'     // Session hijacking, fixation, etc.
  | 'access_control'         // Broken authorization, privilege escalation
  | 'cryptography'           // Weak encryption, crypto implementation issues
  | 'input_validation'       // Cross-site scripting (XSS), input filtering
  | 'configuration'          // Security misconfigurations
  | 'known_vulnerabilities'  // Using components with known security flaws
  | 'logging_monitoring'     // Insufficient logging and monitoring
  | 'server_side_forgery'    // SSRF, XXE, and related attacks

// üéØ Scan Target (What we're scanning)
interface ScanTarget {
  id: string
  name: string
  type: 'web_application' | 'network' | 'mobile_app' | 'database' | 'api' | 'infrastructure'
  url?: string                 // For web applications
  ipRange?: string             // For network scans
  description: string
  criticality: 'low' | 'medium' | 'high' | 'critical'  // How important this system is
  owner: string               // Who's responsible for this system
  lastScanDate?: Date         // When we last scanned it
  scanHistory: ScanResult[]   // Previous scan results
}

// üìä Scan Result (Results from a vulnerability scan)
interface ScanResult {
  id: string
  targetId: string            // Which target was scanned
  startTime: Date
  endTime?: Date
  status: 'running' | 'completed' | 'failed' | 'cancelled'
  vulnerabilities: Vulnerability[]
  summary: ScanSummary
  scanType: 'quick' | 'full' | 'custom'
  progress: number            // Scan progress percentage
  estimatedTimeRemaining?: number  // Minutes remaining
}

// üìà Scan Summary (High-level overview of findings)
interface ScanSummary {
  totalVulnerabilities: number
  criticalCount: number
  highCount: number
  mediumCount: number
  lowCount: number
  infoCount: number
  riskScore: number           // Overall risk score (0-100)
  complianceScore: number     // How well we meet security standards
  previousScanComparison?: {
    newVulnerabilities: number
    fixedVulnerabilities: number
    riskScoreChange: number
  }
}

/**
 * üîç EXAMPLE VULNERABILITIES DATABASE
 * 
 * These are realistic examples of vulnerabilities that scanners might find!
 * We've made them educational but representative of real security issues.
 */
const VULNERABILITY_DATABASE: Omit<Vulnerability, 'id' | 'discoveredDate' | 'status'>[] = [
  {
    title: 'SQL Injection in User Login',
    description: 'The login form does not properly validate user input, allowing attackers to manipulate database queries.',
    severity: 'critical',
    cvssScore: 9.1,
    category: 'injection',
    affectedComponent: 'User Authentication System',
    remediation: 'Use parameterized queries (prepared statements) and input validation to prevent SQL injection attacks.',
    references: [
      'https://owasp.org/www-project-top-ten/2017/A1_2017-Injection',
      'https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html'
    ],
    exploitComplexity: 'low',
    riskRating: 95,
    technicalDetails: 'User input from login form is directly concatenated into SQL queries without sanitization. Example: SELECT * FROM users WHERE username = \'\' + userInput + \'\' AND password = \'\' + passwordInput + \'\''
  },
  {
    title: 'Cross-Site Scripting (XSS) in Comments',
    description: 'User comments are displayed without proper encoding, allowing malicious scripts to execute in other users\' browsers.',
    severity: 'high',
    cvssScore: 7.5,
    category: 'input_validation',
    affectedComponent: 'Comment System',
    remediation: 'Encode all user input before displaying it. Use Content Security Policy (CSP) headers to prevent script execution.',
    references: [
      'https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS)',
      'https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html'
    ],
    exploitComplexity: 'low',
    riskRating: 75,
    technicalDetails: 'User input is directly inserted into HTML without encoding. Malicious users can submit comments containing <script> tags that execute in other users\' browsers.'
  },
  {
    title: 'Weak Password Policy',
    description: 'The system allows users to set weak passwords that are easily guessable or crackable.',
    severity: 'medium',
    cvssScore: 5.3,
    category: 'authentication',
    affectedComponent: 'Password Management',
    remediation: 'Implement strong password requirements: minimum 12 characters, mixed case, numbers, symbols. Consider multi-factor authentication.',
    references: [
      'https://pages.nist.gov/800-63-3/sp800-63b.html',
      'https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication'
    ],
    exploitComplexity: 'medium',
    riskRating: 60,
    technicalDetails: 'Current password policy allows passwords as short as 6 characters with no complexity requirements. Common passwords like "password123" are accepted.'
  },
  {
    title: 'Unencrypted Database Communications',
    description: 'Database connections are not encrypted, potentially exposing sensitive data during transmission.',
    severity: 'high',
    cvssScore: 8.2,
    category: 'cryptography',
    affectedComponent: 'Database Layer',
    remediation: 'Enable SSL/TLS encryption for all database connections. Use certificates for authentication.',
    references: [
      'https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure',
      'https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html'
    ],
    exploitComplexity: 'medium',
    riskRating: 82,
    technicalDetails: 'Database connections use unencrypted TCP connections. Network traffic analysis could reveal sensitive data including passwords and personal information.'
  },
  {
    title: 'Missing Security Headers',
    description: 'Web application is missing important security headers that protect against common attacks.',
    severity: 'medium',
    cvssScore: 4.7,
    category: 'configuration',
    affectedComponent: 'Web Server Configuration',
    remediation: 'Add security headers: Content-Security-Policy, X-Frame-Options, X-Content-Type-Options, Strict-Transport-Security.',
    references: [
      'https://owasp.org/www-project-secure-headers/',
      'https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Headers_Cheat_Sheet.html'
    ],
    exploitComplexity: 'low',
    riskRating: 45,
    technicalDetails: 'HTTP responses lack security headers that prevent clickjacking, MIME sniffing, and other client-side attacks.'
  },
  {
    title: 'Outdated Third-Party Libraries',
    description: 'The application uses outdated libraries with known security vulnerabilities.',
    severity: 'high',
    cvssScore: 7.8,
    category: 'known_vulnerabilities',
    affectedComponent: 'Third-Party Dependencies',
    remediation: 'Update all libraries to latest versions. Implement automated dependency scanning and regular updates.',
    references: [
      'https://owasp.org/www-project-top-ten/2017/A9_2017-Using_Components_with_Known_Vulnerabilities',
      'https://nvd.nist.gov/'
    ],
    exploitComplexity: 'low',
    riskRating: 78,
    technicalDetails: 'Application uses jQuery 1.8.2 (current is 3.7+) and other outdated libraries with publicly disclosed vulnerabilities.'
  }
]

/**
 * üéØ EXAMPLE SCAN TARGETS
 * 
 * These represent different types of systems that might be scanned for vulnerabilities
 */
const EXAMPLE_TARGETS: Omit<ScanTarget, 'scanHistory'>[] = [
  {
    id: 'target-webapp-001',
    name: 'Student Portal Web Application',
    type: 'web_application',
    url: 'https://portal.example.edu',
    description: 'Main student portal for accessing grades, assignments, and course materials',
    criticality: 'high',
    owner: 'Academic Technology Team',
    lastScanDate: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) // 7 days ago
  },
  {
    id: 'target-api-001',
    name: 'Course Management API',
    type: 'api',
    url: 'https://api.courses.example.edu',
    description: 'RESTful API for course management and enrollment systems',
    criticality: 'critical',
    owner: 'Backend Development Team'
  },
  {
    id: 'target-mobile-001',
    name: 'Campus Safety Mobile App',
    type: 'mobile_app',
    description: 'iOS and Android app for campus emergency notifications and safety features',
    criticality: 'high',
    owner: 'Campus Safety Department'
  },
  {
    id: 'target-network-001',
    name: 'Student WiFi Network',
    type: 'network',
    ipRange: '10.100.0.0/16',
    description: 'Campus-wide wireless network infrastructure for student devices',
    criticality: 'medium',
    owner: 'Network Operations Center'
  },
  {
    id: 'target-db-001',
    name: 'Student Information Database',
    type: 'database',
    description: 'Primary database containing student records, grades, and personal information',
    criticality: 'critical',
    owner: 'Database Administration Team'
  }
]

/**
 * üéÆ MAIN VULNERABILITY SCANNER COMPONENT
 * 
 * This is the main interface where students can explore vulnerability assessment!
 */
export default function VulnerabilityAssessmentLab() {
  /**
   * üß† COMPONENT STATE
   * 
   * React hooks help us track the state of our vulnerability scanner
   */
  const [scanTargets, setScanTargets] = useState<ScanTarget[]>([])
  const [currentScan, setCurrentScan] = useState<ScanResult | null>(null)
  const [scanHistory, setScanHistory] = useState<ScanResult[]>([])
  const [selectedTarget, setSelectedTarget] = useState<ScanTarget | null>(null)
  const [activeTab, setActiveTab] = useState<'dashboard' | 'targets' | 'scanner' | 'reports' | 'learning'>('dashboard')
  const [scanProgress, setScanProgress] = useState(0)

  /**
   * üèóÔ∏è INITIALIZE DEMO DATA
   * 
   * Set up realistic example data for educational purposes
   */
  useEffect(() => {
    const targets: ScanTarget[] = EXAMPLE_TARGETS.map(target => ({
      ...target,
      scanHistory: []
    }))
    setScanTargets(targets)
  }, [])

  /**
   * üéØ VULNERABILITY GENERATOR
   * 
   * Simulates finding vulnerabilities during a scan. In real scanners, this would
   * involve actual security testing techniques like port scanning, web crawling,
   * and pattern matching against vulnerability signatures.
   */
  const generateVulnerabilities = useCallback((target: ScanTarget, scanType: 'quick' | 'full' | 'custom'): Vulnerability[] => {
    // üé≤ Determine how many vulnerabilities to "find" based on scan type and target criticality
    const baseCount = scanType === 'quick' ? 3 : scanType === 'full' ? 8 : 5
    const criticalityMultiplier = target.criticality === 'critical' ? 1.5 : 
                                 target.criticality === 'high' ? 1.2 : 
                                 target.criticality === 'medium' ? 1.0 : 0.7
    
    const vulnerabilityCount = Math.floor(baseCount * criticalityMultiplier)
    
    // üéØ Select random vulnerabilities from our database
    const selectedVulns = [...VULNERABILITY_DATABASE]
      .sort(() => Math.random() - 0.5) // Shuffle the array
      .slice(0, vulnerabilityCount)
      .map((vuln, index) => ({
        ...vuln,
        id: `vuln-${Date.now()}-${index}`,
        discoveredDate: new Date(),
        status: 'new' as const,
        // üé≠ Add some randomization to make each scan feel unique
        cvssScore: Math.max(0, Math.min(10, vuln.cvssScore + (Math.random() - 0.5) * 2)),
        riskRating: Math.max(0, Math.min(100, vuln.riskRating + (Math.random() - 0.5) * 20))
      }))

    return selectedVulns
  }, [])

  /**
   * üìä CALCULATE SCAN SUMMARY
   * 
   * Analyzes all vulnerabilities found and creates a summary report
   */
  const calculateScanSummary = useCallback((vulnerabilities: Vulnerability[]): ScanSummary => {
    const counts = vulnerabilities.reduce((acc, vuln) => {
      acc[vuln.severity]++
      return acc
    }, { critical: 0, high: 0, medium: 0, low: 0, info: 0 })

    // üßÆ Calculate overall risk score based on vulnerabilities found
    const riskScore = vulnerabilities.reduce((total, vuln) => {
      const severityWeights = { critical: 20, high: 10, medium: 5, low: 2, info: 1 }
      return total + severityWeights[vuln.severity]
    }, 0)

    // üìà Calculate compliance score (higher is better)
    const maxRisk = vulnerabilities.length * 20 // If all were critical
    const complianceScore = maxRisk > 0 ? Math.max(0, 100 - (riskScore / maxRisk) * 100) : 100

    return {
      totalVulnerabilities: vulnerabilities.length,
      criticalCount: counts.critical,
      highCount: counts.high,
      mediumCount: counts.medium,
      lowCount: counts.low,
      infoCount: counts.info,
      riskScore: Math.min(100, riskScore),
      complianceScore: Math.round(complianceScore)
    }
  }, [])

  /**
   * üöÄ START VULNERABILITY SCAN
   * 
   * Simulates running a vulnerability scan with realistic timing and progress updates
   */
  const startScan = useCallback((target: ScanTarget, scanType: 'quick' | 'full' | 'custom') => {
    // üéØ Create new scan result
    const newScan: ScanResult = {
      id: `scan-${Date.now()}`,
      targetId: target.id,
      startTime: new Date(),
      status: 'running',
      vulnerabilities: [],
      summary: {
        totalVulnerabilities: 0,
        criticalCount: 0,
        highCount: 0,
        mediumCount: 0,
        lowCount: 0,
        infoCount: 0,
        riskScore: 0,
        complianceScore: 100
      },
      scanType,
      progress: 0
    }

    setCurrentScan(newScan)
    setScanProgress(0)

    // üïê Simulate scan duration (educational timing)
    const scanDuration = scanType === 'quick' ? 10000 : // 10 seconds
                        scanType === 'full' ? 30000 :   // 30 seconds
                        20000 // 20 seconds for custom

    const progressInterval = 500 // Update every 500ms
    const totalSteps = scanDuration / progressInterval

    let currentStep = 0

    const progressTimer = setInterval(() => {
      currentStep++
      const progress = (currentStep / totalSteps) * 100
      setScanProgress(progress)

      // üîç Simulate different scan phases with educational messages
      if (progress < 20) {
        toast.info('üîç Initializing scan and gathering target information...')
      } else if (progress < 40) {
        toast.info('üåê Scanning for network vulnerabilities...')
      } else if (progress < 60) {
        toast.info('üõ°Ô∏è Testing authentication and access controls...')
      } else if (progress < 80) {
        toast.info('üìù Analyzing application security...')
      } else if (progress < 95) {
        toast.info('üìä Generating vulnerability report...')
      }

      if (currentStep >= totalSteps) {
        clearInterval(progressTimer)

        // üéØ Generate final vulnerabilities and complete the scan
        const vulnerabilities = generateVulnerabilities(target, scanType)
        const summary = calculateScanSummary(vulnerabilities)

        const completedScan: ScanResult = {
          ...newScan,
          endTime: new Date(),
          status: 'completed',
          vulnerabilities,
          summary,
          progress: 100
        }

        setCurrentScan(completedScan)
        setScanHistory(prev => [completedScan, ...prev.slice(0, 9)]) // Keep last 10 scans
        
        // üìä Update target's last scan date
        setScanTargets(prev => prev.map(t => 
          t.id === target.id 
            ? { ...t, lastScanDate: new Date(), scanHistory: [completedScan, ...t.scanHistory.slice(0, 4)] }
            : t
        ))

        // üéâ Show completion message
        const vulnCount = vulnerabilities.length
        const criticalCount = summary.criticalCount
        
        if (criticalCount > 0) {
          toast.error(`‚ö†Ô∏è Scan complete! Found ${vulnCount} vulnerabilities including ${criticalCount} critical issues!`)
        } else if (vulnCount > 0) {
          toast.warning(`‚ö†Ô∏è Scan complete! Found ${vulnCount} vulnerabilities to review.`)
        } else {
          toast.success('‚úÖ Scan complete! No vulnerabilities detected.')
        }
      }
    }, progressInterval)

    toast.success(`üöÄ Starting ${scanType} vulnerability scan of ${target.name}`)

  }, [generateVulnerabilities, calculateScanSummary])

  /**
   * ‚èπÔ∏è STOP CURRENT SCAN
   */
  const stopScan = useCallback(() => {
    if (currentScan) {
      const stoppedScan = {
        ...currentScan,
        endTime: new Date(),
        status: 'cancelled' as const
      }
      setCurrentScan(stoppedScan)
      setScanProgress(0)
      toast.info('üõë Vulnerability scan cancelled')
    }
  }, [currentScan])

  /**
   * üé® RENDER THE VULNERABILITY SCANNER INTERFACE
   */
  return (
    <div className="max-w-7xl mx-auto p-6 bg-gradient-to-br from-gray-50 to-red-50 min-h-screen">
      
      {/* üéØ Header Section */}
      <motion.div 
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        className="text-center mb-8"
      >
        <h1 className="text-4xl font-bold text-gray-800 mb-2">
          üîç Vulnerability Assessment Lab
        </h1>
        <p className="text-xl text-gray-600 mb-6">
          Find security weaknesses before the bad guys do!
        </p>

        {/* üìä Tab Navigation */}
        <div className="flex justify-center space-x-4 flex-wrap">
          {[
            { id: 'dashboard', label: 'üìä Security Dashboard', icon: BarChart3 },
            { id: 'targets', label: 'üéØ Scan Targets', icon: Target },
            { id: 'scanner', label: 'üîç Vulnerability Scanner', icon: Search },
            { id: 'reports', label: 'üìã Security Reports', icon: FileText },
            { id: 'learning', label: 'üéì Learn Vulnerability Assessment', icon: Users }
          ].map(tab => (
            <motion.button
              key={tab.id}
              onClick={() => setActiveTab(tab.id as any)}
              className={`px-6 py-3 rounded-lg font-medium transition-all duration-200 ${
                activeTab === tab.id
                  ? 'bg-red-500 text-white shadow-lg'
                  : 'bg-white text-gray-600 hover:bg-gray-100'
              }`}
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
            >
              <tab.icon className="w-5 h-5 inline mr-2" />
              {tab.label}
            </motion.button>
          ))}
        </div>
      </motion.div>

      <AnimatePresence mode="wait">
        {activeTab === 'dashboard' && <DashboardView scanHistory={scanHistory} currentScan={currentScan} targets={scanTargets} />}
        {activeTab === 'targets' && <TargetsView targets={scanTargets} onSelectTarget={setSelectedTarget} />}
        {activeTab === 'scanner' && <ScannerView selectedTarget={selectedTarget} currentScan={currentScan} onStartScan={startScan} onStopScan={stopScan} scanProgress={scanProgress} />}
        {activeTab === 'reports' && <ReportsView scanHistory={scanHistory} />}
        {activeTab === 'learning' && <LearningView />}
      </AnimatePresence>
    </div>
  )
}

/**
 * üìä DASHBOARD VIEW - Security Overview
 */
interface DashboardViewProps {
  scanHistory: ScanResult[]
  currentScan: ScanResult | null
  targets: ScanTarget[]
}

function DashboardView({ scanHistory, currentScan, targets }: DashboardViewProps) {
  // üìà Calculate dashboard metrics
  const recentScans = scanHistory.slice(0, 5)
  const totalVulnerabilities = scanHistory.reduce((sum, scan) => sum + scan.vulnerabilities.length, 0)
  const criticalVulnerabilities = scanHistory.reduce((sum, scan) => 
    sum + scan.vulnerabilities.filter(v => v.severity === 'critical').length, 0)
  const averageRiskScore = scanHistory.length > 0 
    ? scanHistory.reduce((sum, scan) => sum + scan.summary.riskScore, 0) / scanHistory.length 
    : 0

  return (
    <motion.div
      key="dashboard"
      initial={{ opacity: 0, x: -20 }}
      animate={{ opacity: 1, x: 0 }}
      exit={{ opacity: 0, x: 20 }}
      className="grid grid-cols-1 lg:grid-cols-3 gap-6"
    >
      {/* üìä Key Metrics */}
      <div className="lg:col-span-3">
        <h3 className="text-xl font-semibold mb-4">üéØ Security Metrics Overview</h3>
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div className="bg-white rounded-lg shadow p-6 text-center">
            <div className="text-3xl font-bold text-blue-600">{targets.length}</div>
            <div className="text-sm text-gray-600">üéØ Scan Targets</div>
          </div>
          <div className="bg-white rounded-lg shadow p-6 text-center">
            <div className="text-3xl font-bold text-yellow-600">{totalVulnerabilities}</div>
            <div className="text-sm text-gray-600">üêõ Total Vulnerabilities</div>
          </div>
          <div className="bg-white rounded-lg shadow p-6 text-center">
            <div className="text-3xl font-bold text-red-600">{criticalVulnerabilities}</div>
            <div className="text-sm text-gray-600">‚ö†Ô∏è Critical Issues</div>
          </div>
          <div className="bg-white rounded-lg shadow p-6 text-center">
            <div className="text-3xl font-bold text-purple-600">{Math.round(averageRiskScore)}</div>
            <div className="text-sm text-gray-600">üìä Avg Risk Score</div>
          </div>
        </div>
      </div>

      {/* üîÑ Current Scan Status */}
      <div className="bg-white rounded-xl shadow-lg p-6">
        <h3 className="text-lg font-semibold mb-4 flex items-center">
          <Activity className="w-5 h-5 mr-2" />
          Current Scan Status
        </h3>
        
        {currentScan ? (
          <div className="space-y-4">
            <div className="flex justify-between items-center">
              <span className="text-sm text-gray-600">Target:</span>
              <span className="font-medium text-sm">{targets.find(t => t.id === currentScan.targetId)?.name}</span>
            </div>
            <div className="flex justify-between items-center">
              <span className="text-sm text-gray-600">Status:</span>
              <span className={`px-2 py-1 rounded text-xs font-medium ${
                currentScan.status === 'running' ? 'bg-blue-100 text-blue-800' :
                currentScan.status === 'completed' ? 'bg-green-100 text-green-800' :
                'bg-red-100 text-red-800'
              }`}>
                {currentScan.status.toUpperCase()}
              </span>
            </div>
            {currentScan.status === 'running' && (
              <div>
                <div className="flex justify-between text-sm mb-2">
                  <span>Progress:</span>
                  <span>{Math.round(currentScan.progress)}%</span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-2">
                  <div 
                    className="bg-blue-500 h-2 rounded-full transition-all duration-300"
                    style={{ width: `${currentScan.progress}%` }}
                  />
                </div>
              </div>
            )}
            {currentScan.status === 'completed' && (
              <div className="text-sm space-y-1">
                <div>üìä Found: {currentScan.vulnerabilities.length} vulnerabilities</div>
                <div>‚ö†Ô∏è Critical: {currentScan.summary.criticalCount}</div>
                <div>üî∂ High: {currentScan.summary.highCount}</div>
                <div>üìã Risk Score: {currentScan.summary.riskScore}/100</div>
              </div>
            )}
          </div>
        ) : (
          <div className="text-center text-gray-500 py-8">
            <Search className="w-12 h-12 mx-auto mb-2 text-gray-300" />
            <p>No active scans</p>
            <p className="text-sm mt-2">Start a scan from the Scanner tab!</p>
          </div>
        )}
      </div>

      {/* üìã Recent Scans */}
      <div className="lg:col-span-2 bg-white rounded-xl shadow-lg p-6">
        <h3 className="text-lg font-semibold mb-4 flex items-center">
          <Clock className="w-5 h-5 mr-2" />
          Recent Vulnerability Scans
        </h3>
        
        <div className="space-y-3 max-h-80 overflow-y-auto">
          {recentScans.map(scan => {
            const target = targets.find(t => t.id === scan.targetId)
            return (
              <div key={scan.id} className="border rounded-lg p-4">
                <div className="flex items-center justify-between mb-2">
                  <span className="font-medium text-sm">{target?.name || 'Unknown Target'}</span>
                  <span className={`px-2 py-1 rounded text-xs font-medium ${
                    scan.status === 'completed' ? 'bg-green-100 text-green-800' :
                    scan.status === 'failed' ? 'bg-red-100 text-red-800' :
                    'bg-yellow-100 text-yellow-800'
                  }`}>
                    {scan.status.toUpperCase()}
                  </span>
                </div>
                
                <div className="text-xs text-gray-600 space-y-1">
                  <div>üìÖ {scan.startTime.toLocaleDateString()} at {scan.startTime.toLocaleTimeString()}</div>
                  <div>üéØ Scan Type: {scan.scanType}</div>
                  {scan.status === 'completed' && (
                    <>
                      <div>üêõ Vulnerabilities: {scan.vulnerabilities.length}</div>
                      <div className="flex space-x-4">
                        <span className="text-red-600">Critical: {scan.summary.criticalCount}</span>
                        <span className="text-orange-600">High: {scan.summary.highCount}</span>
                        <span className="text-yellow-600">Medium: {scan.summary.mediumCount}</span>
                      </div>
                    </>
                  )}
                </div>
              </div>
            )
          })}
          
          {recentScans.length === 0 && (
            <div className="text-center text-gray-500 py-8">
              <FileText className="w-12 h-12 mx-auto mb-2 text-gray-300" />
              <p>No scans performed yet!</p>
              <p className="text-sm mt-2">Start scanning to see results here.</p>
            </div>
          )}
        </div>
      </div>
    </motion.div>
  )
}

// üé≠ Simple placeholder components for other views (you can expand these!)
function TargetsView({ targets, onSelectTarget }: any) {
  return (
    <motion.div key="targets" className="text-center p-8">
      <h2 className="text-2xl font-bold mb-4">üéØ Scan Target Management</h2>
      <p className="text-gray-600 mb-4">Configure systems and applications to scan for vulnerabilities</p>
      <div className="bg-blue-50 p-4 rounded-lg">
        <p className="text-blue-700">üìö Advanced target management interface coming soon!</p>
        <p className="text-blue-600 text-sm mt-2">For now, use the Scanner tab to run scans on demo targets.</p>
      </div>
    </motion.div>
  )
}

function ScannerView({ selectedTarget, currentScan, onStartScan, onStopScan, scanProgress }: any) {
  return (
    <motion.div key="scanner" className="text-center p-8">
      <h2 className="text-2xl font-bold mb-4">üîç Vulnerability Scanner Controls</h2>
      <p className="text-gray-600 mb-4">Launch comprehensive security scans</p>
      <div className="bg-green-50 p-4 rounded-lg">
        <p className="text-green-700">üî¨ Advanced scanner interface coming soon!</p>
        <p className="text-green-600 text-sm mt-2">Check the Dashboard for current scan status and results.</p>
      </div>
    </motion.div>
  )
}

function ReportsView({ scanHistory }: any) {
  return (
    <motion.div key="reports" className="text-center p-8">
      <h2 className="text-2xl font-bold mb-4">üìã Security Assessment Reports</h2>
      <p className="text-gray-600 mb-4">Detailed vulnerability reports and remediation guidance</p>
      <div className="bg-purple-50 p-4 rounded-lg">
        <p className="text-purple-700">üìä Advanced reporting interface coming soon!</p>
        <p className="text-purple-600 text-sm mt-2">Detailed vulnerability reports will be available here.</p>
      </div>
    </motion.div>
  )
}

function LearningView() {
  return (
    <motion.div key="learning" className="max-w-4xl mx-auto">
      <h2 className="text-2xl font-bold mb-6 text-center">üéì Vulnerability Assessment Learning Center</h2>
      
      <div className="space-y-6">
        {/* Core Concepts */}
        <div className="bg-white rounded-xl shadow-lg p-6">
          <h3 className="text-xl font-semibold mb-4">üéØ Core Vulnerability Assessment Concepts</h3>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="p-4 border rounded-lg">
              <div className="text-3xl mb-2">üîç</div>
              <h4 className="font-semibold mb-2">Discovery & Scanning</h4>
              <p className="text-sm text-gray-600">
                Find systems, services, and potential entry points that attackers might target
              </p>
            </div>

            <div className="p-4 border rounded-lg">
              <div className="text-3xl mb-2">üêõ</div>
              <h4 className="font-semibold mb-2">Vulnerability Identification</h4>
              <p className="text-sm text-gray-600">
                Detect security weaknesses using automated tools and manual testing techniques
              </p>
            </div>

            <div className="p-4 border rounded-lg">
              <div className="text-3xl mb-2">‚öñÔ∏è</div>
              <h4 className="font-semibold mb-2">Risk Assessment</h4>
              <p className="text-sm text-gray-600">
                Evaluate the potential impact and likelihood of successful exploitation
              </p>
            </div>

            <div className="p-4 border rounded-lg">
              <div className="text-3xl mb-2">üõ†Ô∏è</div>
              <h4 className="font-semibold mb-2">Remediation Planning</h4>
              <p className="text-sm text-gray-600">
                Develop strategies to fix vulnerabilities and improve security posture
              </p>
            </div>
          </div>
        </div>

        {/* OWASP Top 10 */}
        <div className="bg-white rounded-xl shadow-lg p-6">
          <h3 className="text-xl font-semibold mb-4">üèÜ OWASP Top 10 Web Application Security Risks</h3>
          
          <div className="space-y-3">
            {[
              'A01: Broken Access Control',
              'A02: Cryptographic Failures', 
              'A03: Injection',
              'A04: Insecure Design',
              'A05: Security Misconfiguration',
              'A06: Vulnerable and Outdated Components',
              'A07: Identification and Authentication Failures',
              'A08: Software and Data Integrity Failures',
              'A09: Security Logging and Monitoring Failures',
              'A10: Server-Side Request Forgery (SSRF)'
            ].map((risk, index) => (
              <div key={index} className="flex items-center p-3 bg-red-50 rounded-lg">
                <div className="w-8 h-8 bg-red-100 rounded-full flex items-center justify-center text-red-600 font-bold text-sm mr-3">
                  {index + 1}
                </div>
                <span className="text-red-800 font-medium">{risk}</span>
              </div>
            ))}
          </div>
        </div>

        {/* Professional Tools */}
        <div className="bg-white rounded-xl shadow-lg p-6">
          <h3 className="text-xl font-semibold mb-4">üõ†Ô∏è Professional Vulnerability Assessment Tools</h3>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <h4 className="font-semibold mb-2 text-blue-800">üåê Web Application Scanners</h4>
              <ul className="text-sm space-y-1">
                <li>‚Ä¢ OWASP ZAP (Free & Open Source)</li>
                <li>‚Ä¢ Burp Suite (Professional Standard)</li>
                <li>‚Ä¢ Acunetix (Commercial)</li>
                <li>‚Ä¢ Qualys WAS (Cloud-Based)</li>
              </ul>
            </div>
            <div>
              <h4 className="font-semibold mb-2 text-green-800">üåê Network Vulnerability Scanners</h4>
              <ul className="text-sm space-y-1">
                <li>‚Ä¢ Nessus (Industry Standard)</li>
                <li>‚Ä¢ OpenVAS (Open Source)</li>
                <li>‚Ä¢ Rapid7 Nexpose (Enterprise)</li>
                <li>‚Ä¢ Qualys VMDR (Cloud Platform)</li>
              </ul>
            </div>
          </div>
        </div>

        {/* Career Paths */}
        <div className="bg-gradient-to-r from-blue-500 to-purple-500 text-white rounded-xl shadow-lg p-6">
          <h3 className="text-xl font-semibold mb-4">üöÄ Cybersecurity Career Paths</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <h4 className="font-semibold mb-2">üéØ Security Roles That Use Vulnerability Assessment:</h4>
              <ul className="text-sm space-y-1">
                <li>‚Ä¢ Vulnerability Assessment Analyst</li>
                <li>‚Ä¢ Penetration Tester</li>
                <li>‚Ä¢ Security Consultant</li>
                <li>‚Ä¢ Application Security Engineer</li>
                <li>‚Ä¢ Risk Assessment Specialist</li>
              </ul>
            </div>
            <div>
              <h4 className="font-semibold mb-2">üìö Skills to Develop:</h4>
              <ul className="text-sm space-y-1">
                <li>‚Ä¢ Network protocols and security</li>
                <li>‚Ä¢ Web application security</li>
                <li>‚Ä¢ Programming and scripting</li>
                <li>‚Ä¢ Risk assessment methodologies</li>
                <li>‚Ä¢ Compliance frameworks (PCI, SOX, etc.)</li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </motion.div>
  )
}

/**
 * üéì EDUCATIONAL NOTES FOR CURIOUS STUDENTS
 * 
 * This Vulnerability Assessment Lab demonstrates several key cybersecurity concepts:
 * 
 * 1. **Vulnerability Management Lifecycle**: The complete process from discovery to remediation
 * 2. **Risk-Based Prioritization**: How to focus on the most dangerous vulnerabilities first
 * 3. **CVSS Scoring**: Industry-standard method for rating vulnerability severity
 * 4. **Automated vs Manual Testing**: When to use tools vs human expertise
 * 5. **Compliance and Reporting**: How vulnerability data supports regulatory requirements
 * 
 * Key Programming Concepts Demonstrated:
 * - **Complex Data Modeling**: Representing vulnerabilities, scans, and targets
 * - **Asynchronous Operations**: Simulating long-running scan processes
 * - **State Management**: Tracking multiple scans and their progress
 * - **Risk Calculation**: Mathematical approaches to security risk assessment
 * - **Real-Time Updates**: Providing live feedback during scan execution
 * 
 * This type of system is used by:
 * - Security teams in every major organization
 * - Compliance auditors ensuring regulatory requirements
 * - Penetration testers finding security weaknesses
 * - Software development teams building secure applications
 * - Bug bounty hunters discovering vulnerabilities for rewards
 * 
 * Understanding vulnerability assessment is essential for:
 * - Cybersecurity careers (analyst, consultant, penetration tester)
 * - Software development (secure coding practices)
 * - IT administration (maintaining secure infrastructure)
 * - Risk management (understanding business security risks)
 * 
 * Try exploring the code and see if you can:
 * - Add new types of vulnerabilities to detect
 * - Implement different scanning algorithms
 * - Create custom risk calculation methods
 * - Design better data visualization for security metrics
 * - Build integration with real vulnerability databases
 * 
 * Remember: Vulnerability assessment is about protection, not exploitation!
 * Always use these skills to help make systems safer and more secure. üõ°Ô∏èüíô
 */
